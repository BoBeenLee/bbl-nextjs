{"pageProps":{"slug":"typeorm-like-jpa","frontmatter":{"path":"/post/typeorm-like-jpa","title":"Typeorm like jpa","published":false,"date":"2018-03-09"},"content":"<p><a href=\"http://typeorm.io/#/\">Typeorm</a>을 이용해보면서 예전에 개발하던 JPA와 유사한 느낌을 받았다.\n물론 ORM을 다루는 라이브러리가 비슷할테지만 한번 JPA와 비교해보자. ex) <a href=\"https://github.com/OnePageAndroid/OnePageServer\">OnePage</a></p>\n<pre><code>// Page.java\nimport javax.persistence.*;\nimport java.sql.SQLException;\n\n@Getter\n@Setter\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@EqualsAndHashCode(of = \"id\")\n@Entity\n@Table(catalog = \"onepage\", name = \"page\")\n@Where(clause = \"deleted = 0\")\npublic class Page extends Modified {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"pageId\")\n    private Long id;\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"locationId\")\n    @Where(clause = \"deleted = 0\")\n    private Location location;\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"userId\")\n    @Where(clause = \"deleted = 0\")\n    private User user;\n    @Column\n    private String content;\n    @Column\n    private boolean deleted;\n\n    public static Page of(Location location, User user, String content) throws SQLException {\n        return Page.builder()\n            .location(location)\n            .user(user)\n            .content(content)\n            .build();\n    }\n\n    public void deleted() {\n\t\tthis.deleted = true;\n\t}\n}\n</code></pre>\n<pre><code>// page.js\n</code></pre>\n<pre><code>// User.java\nimport javax.persistence.*;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Pattern;\nimport javax.validation.constraints.Size;\n\n@Getter\n@Setter\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(catalog = \"onepage\", name = \"user\")\n@Where(clause = \"deleted = 0\")\npublic class User extends Created {\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.AUTO)\n\t@Column(name = \"userId\")\n\tprivate Long id;\n\t@Column\n\t@NotNull\n\t@Size(min=1,message=\"이메일을 입력하세요.\")\n\t@Pattern(regexp=\"^(\\\\w+)(((\\\\.?)(\\\\w+))*)[@](((\\\\w+)[.])+)(\\\\w{2,3})$\",message=\"이메일 형식만 가능합니다.\")\n\tprivate String email;\n\t@Column\n\tprivate boolean deleted;\n\n\tpublic static User of(String email) {\n\t\treturn User.builder()\n\t\t\t.email(email)\n\t\t\t.build();\n\t}\n}\n</code></pre>\n<pre><code>// user.js\n</code></pre>\n<pre><code>// Location.java\nimport javax.persistence.*;\n\n@Getter\n@Setter\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(catalog = \"onepage\", name = \"location\")\n@Where(clause = \"deleted = 0\")\npublic class Location extends Created {\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.AUTO)\n\t@Column(name = \"locationId\")\n\tprivate Long id;\n\t@Column\n\tprivate Double latitude;\n\t@Column\n\tprivate Double longitude;\n\t@Column\n\tprivate String name;\n\t@Column\n\tprivate String engName;\n\t@Column\n\tprivate String address;\n\t@Column\n\tprivate boolean deleted;\n\n\tpublic static Location of(LocationDto locationDto) {\n\t\treturn Location.builder()\n\t\t\t.latitude(locationDto.getLatitude())\n\t\t\t.longitude(locationDto.getLongitude())\n\t\t\t.name(locationDto.getName())\n\t\t\t.engName(locationDto.getEngName())\n\t\t\t.address(locationDto.getAddress()).build();\n\t}\n\n\tpublic static Location of(Double latitude, Double longitude, String name, String engName, String address) {\n\t\treturn Location.builder()\n\t\t\t.latitude(latitude)\n\t\t\t.longitude(longitude)\n\t\t\t.name(name)\n\t\t\t.engName(engName)\n\t\t\t.address(address).build();\n\t}\n}\n</code></pre>\n<pre><code>// location.js\n</code></pre>\n<p>비슷한 점이 많아 흥미로운 점이 많다.</p>\n"},"__N_SSG":true}